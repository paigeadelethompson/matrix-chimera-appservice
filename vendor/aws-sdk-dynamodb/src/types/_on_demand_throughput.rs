// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Sets the maximum number of read and write units for the specified on-demand table. If you use this parameter, you must specify <code>MaxReadRequestUnits</code>, <code>MaxWriteRequestUnits</code>, or both.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OnDemandThroughput {
    /// <p>Maximum number of read request units for the specified table.</p>
    /// <p>To specify a maximum <code>OnDemandThroughput</code> on your table, set the value of <code>MaxReadRequestUnits</code> as greater than or equal to 1. To remove the maximum <code>OnDemandThroughput</code> that is currently set on your table, set the value of <code>MaxReadRequestUnits</code> to -1.</p>
    pub max_read_request_units: ::std::option::Option<i64>,
    /// <p>Maximum number of write request units for the specified table.</p>
    /// <p>To specify a maximum <code>OnDemandThroughput</code> on your table, set the value of <code>MaxWriteRequestUnits</code> as greater than or equal to 1. To remove the maximum <code>OnDemandThroughput</code> that is currently set on your table, set the value of <code>MaxWriteRequestUnits</code> to -1.</p>
    pub max_write_request_units: ::std::option::Option<i64>,
}
impl OnDemandThroughput {
    /// <p>Maximum number of read request units for the specified table.</p>
    /// <p>To specify a maximum <code>OnDemandThroughput</code> on your table, set the value of <code>MaxReadRequestUnits</code> as greater than or equal to 1. To remove the maximum <code>OnDemandThroughput</code> that is currently set on your table, set the value of <code>MaxReadRequestUnits</code> to -1.</p>
    pub fn max_read_request_units(&self) -> ::std::option::Option<i64> {
        self.max_read_request_units
    }
    /// <p>Maximum number of write request units for the specified table.</p>
    /// <p>To specify a maximum <code>OnDemandThroughput</code> on your table, set the value of <code>MaxWriteRequestUnits</code> as greater than or equal to 1. To remove the maximum <code>OnDemandThroughput</code> that is currently set on your table, set the value of <code>MaxWriteRequestUnits</code> to -1.</p>
    pub fn max_write_request_units(&self) -> ::std::option::Option<i64> {
        self.max_write_request_units
    }
}
impl OnDemandThroughput {
    /// Creates a new builder-style object to manufacture [`OnDemandThroughput`](crate::types::OnDemandThroughput).
    pub fn builder() -> crate::types::builders::OnDemandThroughputBuilder {
        crate::types::builders::OnDemandThroughputBuilder::default()
    }
}

/// A builder for [`OnDemandThroughput`](crate::types::OnDemandThroughput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OnDemandThroughputBuilder {
    pub(crate) max_read_request_units: ::std::option::Option<i64>,
    pub(crate) max_write_request_units: ::std::option::Option<i64>,
}
impl OnDemandThroughputBuilder {
    /// <p>Maximum number of read request units for the specified table.</p>
    /// <p>To specify a maximum <code>OnDemandThroughput</code> on your table, set the value of <code>MaxReadRequestUnits</code> as greater than or equal to 1. To remove the maximum <code>OnDemandThroughput</code> that is currently set on your table, set the value of <code>MaxReadRequestUnits</code> to -1.</p>
    pub fn max_read_request_units(mut self, input: i64) -> Self {
        self.max_read_request_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum number of read request units for the specified table.</p>
    /// <p>To specify a maximum <code>OnDemandThroughput</code> on your table, set the value of <code>MaxReadRequestUnits</code> as greater than or equal to 1. To remove the maximum <code>OnDemandThroughput</code> that is currently set on your table, set the value of <code>MaxReadRequestUnits</code> to -1.</p>
    pub fn set_max_read_request_units(mut self, input: ::std::option::Option<i64>) -> Self {
        self.max_read_request_units = input;
        self
    }
    /// <p>Maximum number of read request units for the specified table.</p>
    /// <p>To specify a maximum <code>OnDemandThroughput</code> on your table, set the value of <code>MaxReadRequestUnits</code> as greater than or equal to 1. To remove the maximum <code>OnDemandThroughput</code> that is currently set on your table, set the value of <code>MaxReadRequestUnits</code> to -1.</p>
    pub fn get_max_read_request_units(&self) -> &::std::option::Option<i64> {
        &self.max_read_request_units
    }
    /// <p>Maximum number of write request units for the specified table.</p>
    /// <p>To specify a maximum <code>OnDemandThroughput</code> on your table, set the value of <code>MaxWriteRequestUnits</code> as greater than or equal to 1. To remove the maximum <code>OnDemandThroughput</code> that is currently set on your table, set the value of <code>MaxWriteRequestUnits</code> to -1.</p>
    pub fn max_write_request_units(mut self, input: i64) -> Self {
        self.max_write_request_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum number of write request units for the specified table.</p>
    /// <p>To specify a maximum <code>OnDemandThroughput</code> on your table, set the value of <code>MaxWriteRequestUnits</code> as greater than or equal to 1. To remove the maximum <code>OnDemandThroughput</code> that is currently set on your table, set the value of <code>MaxWriteRequestUnits</code> to -1.</p>
    pub fn set_max_write_request_units(mut self, input: ::std::option::Option<i64>) -> Self {
        self.max_write_request_units = input;
        self
    }
    /// <p>Maximum number of write request units for the specified table.</p>
    /// <p>To specify a maximum <code>OnDemandThroughput</code> on your table, set the value of <code>MaxWriteRequestUnits</code> as greater than or equal to 1. To remove the maximum <code>OnDemandThroughput</code> that is currently set on your table, set the value of <code>MaxWriteRequestUnits</code> to -1.</p>
    pub fn get_max_write_request_units(&self) -> &::std::option::Option<i64> {
        &self.max_write_request_units
    }
    /// Consumes the builder and constructs a [`OnDemandThroughput`](crate::types::OnDemandThroughput).
    pub fn build(self) -> crate::types::OnDemandThroughput {
        crate::types::OnDemandThroughput {
            max_read_request_units: self.max_read_request_units,
            max_write_request_units: self.max_write_request_units,
        }
    }
}
